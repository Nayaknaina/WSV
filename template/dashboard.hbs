<!DOCTYPE html>
<html>

<head>
    <title>
        Dashboard
    </title>
    <meta name="robots" content="noindex, nofollow">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/png" sizes="32x32" href="./" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.0/css/all.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://d3cuh014go2nda.cloudfront.net/global/assets/css/main.css">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    {{!-- //dashboardcontent --}}

    <link rel="stylesheet" href="/vendors/font-awesome/css/font-awesome.min.css">


    <link rel="stylesheet" href="/assets/css/style.css">

    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800' rel='stylesheet' type='text/css'>



    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" type="text/javascript">
        window.heap = window.heap || [], heap.load = function (e, t) {
            window.heap.appid = e, window.heap.config = t = t || {};
            var r = t.forceSSL || "https:" === document.location.protocol,
                a = document.createElement("script");
            a.type = "text/javascript", a.async = !0, a.src = (r ? "https:" : "http:") + "//cdn.heapanalytics.com/js/heap-" + e + ".js";
            var n = document.getElementsByTagName("script")[0];
            n.parentNode.insertBefore(a, n);
            for (var o = function (e) {
                return function () {
                    heap.push([e].concat(Array.prototype.slice.call(arguments, 0)))
                }
            }, p = ["addEventProperties", "addUserProperties", "clearEventProperties", "identify", "resetIdentity", "removeEventProperty", "setEventProperties", "track", "unsetEventProperty"], c = 0; c < p.length; c++) heap[p[c]] = o(p[c])
        };
        heap.load("490363613");
    </script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" async
        src="https://www.googletagmanager.com/gtm.js?id=GTM-TQ5D84C&nonce=Hg5F/VDpALFrdOCYRvBAvQ=="></script>


</head>

<style>
    body,
    html {
        width: 100%;
        height: 100% !important;
    }

    .findNewLeadloader {
        width: 100%;
        min-height: 100%;
        height: 100vh;
        background-size: cover;
        position: absolute;
        top: 0;
        left: 0;
        z-index: 999999;
        background-color: #908f8faa;
        background-color: #000000aa;
        display: none;
        overflow: hidden;
    }

    #addPipeLoader {
        height: 100%;

    }

    #addPipeLoader #finSec {
        position: absolute;
    }

    #addPipeLoader #finSec .loader-11 {
        width: 48px;
        height: 48px;
        border: 3px solid;
        border-color: #FFF #FFF transparent transparent;
    }

    #addPipeLoader #finSec .loader-11:after {
        width: 40px;
        height: 40px;
        border: 3px solid;
        border-color: transparent transparent #047 #047;
    }

    #addPipeLoader #finSec .loader-11::before {
        width: 40px;
        height: 40px;
        border: 3px solid;
        border-color: transparent transparent #047 #047;
    }

    #finSec {
        min-width: 200px;
        width: 33.33%;
        height: 200px;
        padding: 10px;
        position: relative;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ccc;
        cursor: pointer;
        transition: 0.3s linear;
    }


    .loader-11 {
        width: 96px;
        height: 96px;
        border-radius: 50%;
        display: inline-block;
        position: relative;
        border: 6px solid;
        border-color: #FFF #FFF transparent transparent;
        -webkit-animation: rotation 1s linear infinite;
        animation: rotation 1s linear infinite;
    }

    .loader-11:after,
    .loader-11:before {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        margin: auto;
        border: 6px solid;
        border-color: transparent transparent #047 #047;
        width: 80px;
        height: 80px;
        border-radius: 50%;
        -webkit-animation: rotationBack 0.5s linear infinite;
        animation: rotationBack 0.5s linear infinite;
        transform-origin: center center;
    }

    .loader-11:before {
        width: 64px;
        height: 64px;
        border-color: #FFF #FFF transparent transparent;
        -webkit-animation: rotation 1.5s linear infinite;
        animation: rotation 1.5s linear infinite;

    }

    @media (max-width: 600px) {
        .loader-11:before {
            width: 32px;
            height: 32px;
            border-color: #FFF #FFF transparent transparent;
        }

        .loader-11:after,
        .loader-11:before {
            width: 40px;
            height: 40px;
            border: 3px solid;
            border-color: transparent transparent #047 #047;
        }

        .loader-11 {
            width: 48px;
            height: 48px;
            border: 3px solid;
            border-color: #FFF #FFF transparent transparent;
        }
    }


    @-webkit-keyframes rotationBack {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(-360deg);
        }
    }

    @keyframes rotationBack {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(-360deg);
        }
    }

    @-webkit-keyframes rotation {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .modal {
        display: none;

        position: fixed;
        z-index: 100000000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: none;

        position: fixed;
        z-index: 100000000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;

        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 300px;
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    #whatsappReadyMessage {
        display: none;
        color: green;
        font-weight: bold;
        margin-top: 10px;
    }
</style>


<style>
    #pipeline-bx li label {
        width: 26px;
        height: 26px;
        border-radius: 50px;
        margin: 5px 10px;
    }

    .pipeline-box {
        margin-top: 10px;
        display: none;
    }
</style>

<body class>
    <div id="findNewLeadloader" class="findNewLeadloader">
        <section id="finSec"><span class="loader-11"> </span></section>
            
    </div>
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TQ5D84C&nonce=Hg5F/VDpALFrdOCYRvBAvQ=="
            height="0" width="0" style="display:none;visibility:hidden;"></iframe></noscript>

    {{#if showForm}}
    <!-- Popup Form -->

    <style>
        .fst-form {
            text-align: start;
        }

        .label-For-1st-Form {
            /*  text-align: start; 
     margin: 0 0 0 0; */
            display: block;
            text-align: left;
            color: #1f4a7e;
            font-weight: bold;
            margin-bottom: 8px;
            font-size: 0.9em;
        }

        .fst-form-inp {
            /*  margin: 0 0 10px 0; */
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #99c2ff;
            border-radius: 4px;
            box-sizing: border-box;
            /*  font-size: 1em; */
        }

        .fst-form-select {
            width: 24%;
            border: none;
            outline: none;
            margin: 0;
        }

        .input-mobile {
            width: 100%;
            display: flex;
            justify-content: start;
            align-items: center;
            border: 1px solid gray;
            border-radius: 6px;
            /* display: flex; */
            /* align-items: center;*/

        }

        #whatsapp {
            width: 66%;
        }

        .fst-form-inp.fst-mobile {
            border: none;
            outline: none;
            margin: 0;
        }


        .fst-pass.wrongpass {
            border-color: #dc3545;
            /* Danger red border */
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        }

        #cPassword.correctpass,
        #fst-password.correctpass {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .password-toggle {
            cursor: pointer;
        }

        .password-toggle i {
            font-size: 18px;
            line-height: 1;
            color: #333;
            transition: color 0.3s ease-in-out;
            margin-bottom: 20px;
        }

        .password-toggle i:hover {
            color: #000;
        }

        .fst-pass {
            border: 1px solid #ccc;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-right: 10px;
        }
    </style>

    <div id="popup-form">
        <form id="org-form" class="fst-form" action="/user/submit-form" method="post">
            <h2>Fill the Form to Access Dashboard</h2>
            <label class="label-For-1st-Form" for="name">Name </label>
            <input class="fst-form-inp" type="text" id="name" value="{{user.name}}" name="name" required>

            <label class="label-For-1st-Form" for="email">Registered Email-Id:</label>
            <input class="fst-form-inp" placeholder="Email" type="email" id="email" value="{{user.email}}" name="email"
                required>

            <label class="label-For-1st-Form" for="whatsapp">Enter WhatsApp Number</label>
            <div class="input-mobile">
                <select required id="fst-countryCode" name="countryCode" class="fst-form-select">
                    <option data-countryCode="US" value="1">USA (+1)</option>
                    <option data-countryCode="GB" value="44">UK (+44)</option>
                    <option data-countryCode="DZ" value="213">Algeria (+213)</option>
                    <option data-countryCode="AD" value="376">Andorra (+376)</option>
                    <option data-countryCode="AO" value="244">Angola (+244)</option>
                    <option data-countryCode="AI" value="1264">Anguilla (+1264)</option>
                    <option data-countryCode="AG" value="1268">Antigua &amp; Barbuda (+1268)</option>
                    <option data-countryCode="AR" value="54">Argentina (+54)</option>
                    <option data-countryCode="AM" value="374">Armenia (+374)</option>
                    <option data-countryCode="AW" value="297">Aruba (+297)</option>
                    <option data-countryCode="AU" value="61">Australia (+61)</option>
                    <option data-countryCode="AT" value="43">Austria (+43)</option>
                    <option data-countryCode="AZ" value="994">Azerbaijan (+994)</option>
                    <option data-countryCode="BS" value="1242">Bahamas (+1242)</option>
                    <option data-countryCode="BH" value="973">Bahrain (+973)</option>
                    <option data-countryCode="BD" value="880">Bangladesh (+880)</option>
                    <option data-countryCode="BB" value="1246">Barbados (+1246)</option>
                    <option data-countryCode="BY" value="375">Belarus (+375)</option>
                    <option data-countryCode="BE" value="32">Belgium (+32)</option>
                    <option data-countryCode="BZ" value="501">Belize (+501)</option>
                    <option data-countryCode="BJ" value="229">Benin (+229)</option>
                    <option data-countryCode="BM" value="1441">Bermuda (+1441)</option>
                    <option data-countryCode="BT" value="975">Bhutan (+975)</option>
                    <option data-countryCode="BO" value="591">Bolivia (+591)</option>
                    <option data-countryCode="BA" value="387">Bosnia Herzegovina (+387)</option>
                    <option data-countryCode="BW" value="267">Botswana (+267)</option>
                    <option data-countryCode="BR" value="55">Brazil (+55)</option>
                    <option data-countryCode="BN" value="673">Brunei (+673)</option>
                    <option data-countryCode="BG" value="359">Bulgaria (+359)</option>
                    <option data-countryCode="BF" value="226">Burkina Faso (+226)</option>
                    <option data-countryCode="BI" value="257">Burundi (+257)</option>
                    <option data-countryCode="KH" value="855">Cambodia (+855)</option>
                    <option data-countryCode="CM" value="237">Cameroon (+237)</option>
                    <option data-countryCode="CA" value="1">Canada (+1)</option>
                    <option data-countryCode="CV" value="238">Cape Verde Islands (+238)</option>
                    <option data-countryCode="KY" value="1345">Cayman Islands (+1345)</option>
                    <option data-countryCode="CF" value="236">Central African Republic (+236)</option>
                    <option data-countryCode="CL" value="56">Chile (+56)</option>
                    <option data-countryCode="CN" value="86">China (+86)</option>
                    <option data-countryCode="CO" value="57">Colombia (+57)</option>
                    <option data-countryCode="KM" value="269">Comoros (+269)</option>
                    <option data-countryCode="CG" value="242">Congo (+242)</option>
                    <option data-countryCode="CK" value="682">Cook Islands (+682)</option>
                    <option data-countryCode="CR" value="506">Costa Rica (+506)</option>
                    <option data-countryCode="HR" value="385">Croatia (+385)</option>
                    <option data-countryCode="CU" value="53">Cuba (+53)</option>
                    <option data-countryCode="CY" value="90">Cyprus - North (+90)</option>
                    <option data-countryCode="CY" value="357">Cyprus - South (+357)</option>
                    <option data-countryCode="CZ" value="420">Czech Republic (+420)</option>
                    <option data-countryCode="DK" value="45">Denmark (+45)</option>
                    <option data-countryCode="DJ" value="253">Djibouti (+253)</option>
                    <option data-countryCode="DM" value="1809">Dominica (+1809)</option>
                    <option data-countryCode="DO" value="1809">Dominican Republic (+1809)</option>
                    <option data-countryCode="EC" value="593">Ecuador (+593)</option>
                    <option data-countryCode="EG" value="20">Egypt (+20)</option>
                    <option data-countryCode="SV" value="503">El Salvador (+503)</option>
                    <option data-countryCode="GQ" value="240">Equatorial Guinea (+240)</option>
                    <option data-countryCode="ER" value="291">Eritrea (+291)</option>
                    <option data-countryCode="EE" value="372">Estonia (+372)</option>
                    <option data-countryCode="ET" value="251">Ethiopia (+251)</option>
                    <option data-countryCode="FK" value="500">Falkland Islands (+500)</option>
                    <option data-countryCode="FO" value="298">Faroe Islands (+298)</option>
                    <option data-countryCode="FJ" value="679">Fiji (+679)</option>
                    <option data-countryCode="FI" value="358">Finland (+358)</option>
                    <option data-countryCode="FR" value="33">France (+33)</option>
                    <option data-countryCode="GF" value="594">French Guiana (+594)</option>
                    <option data-countryCode="PF" value="689">French Polynesia (+689)</option>
                    <option data-countryCode="GA" value="241">Gabon (+241)</option>
                    <option data-countryCode="GM" value="220">Gambia (+220)</option>
                    <option data-countryCode="GE" value="7880">Georgia (+7880)</option>
                    <option data-countryCode="DE" value="49">Germany (+49)</option>
                    <option data-countryCode="GH" value="233">Ghana (+233)</option>
                    <option data-countryCode="GI" value="350">Gibraltar (+350)</option>
                    <option data-countryCode="GR" value="30">Greece (+30)</option>
                    <option data-countryCode="GL" value="299">Greenland (+299)</option>
                    <option data-countryCode="GD" value="1473">Grenada (+1473)</option>
                    <option data-countryCode="GP" value="590">Guadeloupe (+590)</option>
                    <option data-countryCode="GU" value="671">Guam (+671)</option>
                    <option data-countryCode="GT" value="502">Guatemala (+502)</option>
                    <option data-countryCode="GN" value="224">Guinea (+224)</option>
                    <option data-countryCode="GW" value="245">Guinea - Bissau (+245)</option>
                    <option data-countryCode="GY" value="592">Guyana (+592)</option>
                    <option data-countryCode="HT" value="509">Haiti (+509)</option>
                    <option data-countryCode="HN" value="504">Honduras (+504)</option>
                    <option data-countryCode="HK" value="852">Hong Kong (+852)</option>
                    <option data-countryCode="HU" value="36">Hungary (+36)</option>
                    <option data-countryCode="IS" value="354">Iceland (+354)</option>
                    <option data-countryCode="IN" value="91">India (+91)</option>
                    <option data-countryCode="ID" value="62">Indonesia (+62)</option>
                    <option data-countryCode="IQ" value="964">Iraq (+964)</option>
                    <option data-countryCode="IR" value="98">Iran (+98)</option>
                    <option data-countryCode="IE" value="353">Ireland (+353)</option>
                    <option data-countryCode="IL" value="972">Israel (+972)</option>
                    <option data-countryCode="IT" value="39">Italy (+39)</option>
                    <option data-countryCode="JM" value="1876">Jamaica (+1876)</option>
                    <option data-countryCode="JP" value="81">Japan (+81)</option>
                    <option data-countryCode="JO" value="962">Jordan (+962)</option>
                    <option data-countryCode="KZ" value="7">Kazakhstan (+7)</option>
                    <option data-countryCode="KE" value="254">Kenya (+254)</option>
                    <option data-countryCode="KI" value="686">Kiribati (+686)</option>
                    <option data-countryCode="KP" value="850">Korea - North (+850)</option>
                    <option data-countryCode="KR" value="82">Korea - South (+82)</option>
                    <option data-countryCode="KW" value="965">Kuwait (+965)</option>
                    <option data-countryCode="KG" value="996">Kyrgyzstan (+996)</option>
                    <option data-countryCode="LA" value="856">Laos (+856)</option>
                    <option data-countryCode="LV" value="371">Latvia (+371)</option>
                    <option data-countryCode="LB" value="961">Lebanon (+961)</option>
                    <option data-countryCode="LS" value="266">Lesotho (+266)</option>
                    <option data-countryCode="LR" value="231">Liberia (+231)</option>
                    <option data-countryCode="LY" value="218">Libya (+218)</option>
                    <option data-countryCode="LI" value="417">Liechtenstein (+417)</option>
                    <option data-countryCode="LT" value="370">Lithuania (+370)</option>
                    <option data-countryCode="LU" value="352">Luxembourg (+352)</option>
                    <option data-countryCode="MO" value="853">Macao (+853)</option>
                    <option data-countryCode="MK" value="389">Macedonia (+389)</option>
                    <option data-countryCode="MG" value="261">Madagascar (+261)</option>
                    <option data-countryCode="MW" value="265">Malawi (+265)</option>
                    <option data-countryCode="MY" value="60">Malaysia (+60)</option>
                    <option data-countryCode="MV" value="960">Maldives (+960)</option>
                    <option data-countryCode="ML" value="223">Mali (+223)</option>
                    <option data-countryCode="MT" value="356">Malta (+356)</option>
                    <option data-countryCode="MH" value="692">Marshall Islands (+692)</option>
                    <option data-countryCode="MQ" value="596">Martinique (+596)</option>
                    <option data-countryCode="MR" value="222">Mauritania (+222)</option>
                    <option data-countryCode="YT" value="269">Mayotte (+269)</option>
                    <option data-countryCode="MX" value="52">Mexico (+52)</option>
                    <option data-countryCode="FM" value="691">Micronesia (+691)</option>
                    <option data-countryCode="MD" value="373">Moldova (+373)</option>
                    <option data-countryCode="MC" value="377">Monaco (+377)</option>
                    <option data-countryCode="MN" value="976">Mongolia (+976)</option>
                    <option data-countryCode="MS" value="1664">Montserrat (+1664)</option>
                    <option data-countryCode="MA" value="212">Morocco (+212)</option>
                    <option data-countryCode="MZ" value="258">Mozambique (+258)</option>
                    <option data-countryCode="MN" value="95">Myanmar (+95)</option>
                    <option data-countryCode="NA" value="264">Namibia (+264)</option>
                    <option data-countryCode="NR" value="674">Nauru (+674)</option>
                    <option data-countryCode="NP" value="977">Nepal (+977)</option>
                    <option data-countryCode="NL" value="31">Netherlands (+31)</option>
                    <option data-countryCode="NC" value="687">New Caledonia (+687)</option>
                    <option data-countryCode="NZ" value="64">New Zealand (+64)</option>
                    <option data-countryCode="NI" value="505">Nicaragua (+505)</option>
                    <option data-countryCode="NE" value="227">Niger (+227)</option>
                    <option data-countryCode="NG" value="234">Nigeria (+234)</option>
                    <option data-countryCode="NU" value="683">Niue (+683)</option>
                    <option data-countryCode="NF" value="672">Norfolk Islands (+672)</option>
                    <option data-countryCode="NP" value="670">Northern Marianas (+670)</option>
                    <option data-countryCode="NO" value="47">Norway (+47)</option>
                    <option data-countryCode="OM" value="968">Oman (+968)</option>
                    <option data-countryCode="PK" value="92">Pakistan (+92)</option>
                    <option data-countryCode="PW" value="680">Palau (+680)</option>
                    <option data-countryCode="PA" value="507">Panama (+507)</option>
                    <option data-countryCode="PG" value="675">Papua New Guinea (+675)</option>
                    <option data-countryCode="PY" value="595">Paraguay (+595)</option>
                    <option data-countryCode="PE" value="51">Peru (+51)</option>
                    <option data-countryCode="PH" value="63">Philippines (+63)</option>
                    <option data-countryCode="PL" value="48">Poland (+48)</option>
                    <option data-countryCode="PT" value="351">Portugal (+351)</option>
                    <option data-countryCode="PR" value="1787">Puerto Rico (+1787)</option>
                    <option data-countryCode="QA" value="974">Qatar (+974)</option>
                    <option data-countryCode="RE" value="262">Reunion (+262)</option>
                    <option data-countryCode="RO" value="40">Romania (+40)</option>
                    <option data-countryCode="RU" value="7">Russia (+7)</option>
                    <option data-countryCode="RW" value="250">Rwanda (+250)</option>
                    <option data-countryCode="SM" value="378">San Marino (+378)</option>
                    <option data-countryCode="ST" value="239">Sao Tome &amp; Principe (+239)</option>
                    <option data-countryCode="SA" value="966">Saudi Arabia (+966)</option>
                    <option data-countryCode="SN" value="221">Senegal (+221)</option>
                    <option data-countryCode="CS" value="381">Serbia (+381)</option>
                    <option data-countryCode="SC" value="248">Seychelles (+248)</option>
                    <option data-countryCode="SL" value="232">Sierra Leone (+232)</option>
                    <option data-countryCode="SG" value="65">Singapore (+65)</option>
                    <option data-countryCode="SK" value="421">Slovak Republic (+421)</option>
                    <option data-countryCode="SI" value="386">Slovenia (+386)</option>
                    <option data-countryCode="SB" value="677">Solomon Islands (+677)</option>
                    <option data-countryCode="SO" value="252">Somalia (+252)</option>
                    <option data-countryCode="ZA" value="27">South Africa (+27)</option>
                    <option data-countryCode="ES" value="34">Spain (+34)</option>
                    <option data-countryCode="LK" value="94">Sri Lanka (+94)</option>
                    <option data-countryCode="SH" value="290">St. Helena (+290)</option>
                    <option data-countryCode="KN" value="1869">St. Kitts (+1869)</option>
                    <option data-countryCode="SC" value="1758">St. Lucia (+1758)</option>
                    <option data-countryCode="SR" value="597">Suriname (+597)</option>
                    <option data-countryCode="SD" value="249">Sudan (+249)</option>
                    <option data-countryCode="SZ" value="268">Swaziland (+268)</option>
                    <option data-countryCode="SE" value="46">Sweden (+46)</option>
                    <option data-countryCode="CH" value="41">Switzerland (+41)</option>
                    <option data-countryCode="SY" value="963">Syria (+963)</option>
                    <option data-countryCode="TW" value="886">Taiwan (+886)</option>
                    <option data-countryCode="TJ" value="992">Tajikistan (+992)</option>
                    <option data-countryCode="TH" value="66">Thailand (+66)</option>
                    <option data-countryCode="TG" value="228">Togo (+228)</option>
                    <option data-countryCode="TO" value="676">Tonga (+676)</option>
                    <option data-countryCode="TT" value="1868">Trinidad &amp; Tobago (+1868)</option>
                    <option data-countryCode="TN" value="216">Tunisia (+216)</option>
                    <option data-countryCode="TR" value="90">Turkey (+90)</option>
                    <option data-countryCode="TM" value="993">Turkmenistan (+993)</option>
                    <option data-countryCode="TC" value="1649">Turks &amp; Caicos Islands (+1649)</option>
                    <option data-countryCode="TV" value="688">Tuvalu (+688)</option>
                    <option data-countryCode="UG" value="256">Uganda (+256)</option>
                    <option data-countryCode="UA" value="380">Ukraine (+380)</option>
                    <option data-countryCode="AE" value="971">United Arab Emirates (+971)</option>
                    <option data-countryCode="UY" value="598">Uruguay (+598)</option>
                    <option data-countryCode="UZ" value="998">Uzbekistan (+998)</option>
                    <option data-countryCode="VU" value="678">Vanuatu (+678)</option>
                    <option data-countryCode="VA" value="379">Vatican City (+379)</option>
                    <option data-countryCode="VE" value="58">Venezuela (+58)</option>
                    <option data-countryCode="VN" value="84">Vietnam (+84)</option>
                    <option data-countryCode="VG" value="1">Virgin Islands - British (+1)</option>
                    <option data-countryCode="VI" value="1">Virgin Islands - US (+1)</option>
                    <option data-countryCode="WF" value="681">Wallis &amp; Futuna (+681)</option>
                    <option data-countryCode="YE" value="969">Yemen (North)(+969)</option>
                    <option data-countryCode="YE" value="967">Yemen (South)(+967)</option>
                    <option data-countryCode="ZM" value="260">Zambia (+260)</option>
                    <option data-countryCode="ZW" value="263">Zimbabwe (+263)</option>
                </select>
                <input class="fst-form-inp fst-mobile" placeholder="Enter Whatsapp Number" type="tel" id="whatsapp"
                    maxlength="10" name="whatsappNum" required>
            </div>



            <label class="label-For-1st-Form" for="pass">Enter Passwaord</label>
            <div class="input-field fst-pass"
                style="border: 1px solid #ccc; border-radius: 6px; display: flex; justify-content: space-between; align-items: center;">

                <input style="margin: 0; border: none;" placeholder="Password" name="password" id="pass" type="password"
                    required>
                <span class="password-toggle"><i class="fas fa-eye" style="margin: 0;"></i></span>
            </div>

            <label class="label-For-1st-Form" for="cPassword">Confirm Passwaord</label>

            <div class="input-field fst-pass">
                <input style="margin: 0; border: none;" placeholder="Confirm Password" name="cPassword" id="cPassword"
                    type="password" required>
                <span class="password-toggle"
                    style="height: 100%; display: flex; justify-content: center; align-items: center;"><i
                        class="fas fa-eye" style="margin: 0;"></i></span>
            </div>

            <div class="check"
                style="margin-top: 6px; display: flex; justify-content: start; align-items: center; height: 25px; width: 100%;">
                <input type="checkbox" onclick="toggleAgentCodeInput()"
                    style="font-size: 20px; width: 16px; height: 16px; margin-right: 10px;" id="isAC">
                <label for="isAC" style="margin: 0;"> Do you have an agent code?</label>
            </div>

            <div class="AC" style="display: none;">
                <label class="label-For-1st-Form" for="AC">Agent Code</label>
                <input class="fst-form-inp" type="text" id="AC" placeholder="Agent Code..." name="agentCode">
            </div>


            <button type="button" onclick="SubmitFirstForm()">Submit</button>
        </form>
    </div>
    {{else}}
    <div class="container-fluid" id="dashboard-content">
        <div class="row">
            {{> sidebar}}
            <div class="fg-main-content-wrap col-xl-11 col-lg-11 col-md-12 p-0 home-section ">
                {{> NameHead}}
                <div class="content ">

                    {{#if successMSG}}
                    <div class="col-sm-12">
                        <div id="alert-success" class="alert  alert-success alert-dismissible fade show" role="alert">
                            <span class="badge badge-pill badge-success">Success</span> {{successMSG}}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                    {{/if}}

                    {{#if errorMSG}}
                    <div class="col-sm-12">
                        <div id="alert-error" class="alert  alert-danger alert-dismissible fade show" role="alert">
                            <span class="badge badge-pill badge-danger">Alert</span> {{errorMSG}}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                    {{/if}}

                    {{#if warnMSG}}
                    <div class="col-sm-12">
                        <div id="alert-warn" class="alert  alert-warning alert-dismissible fade show" role="alert">
                            <span class="badge badge-pill bg-warning text-dark">Warning</span> {{warnMSG}}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                    {{/if}}


                    <div class="row">
                        <!--/.col-->
                        <style>
                            .social-box .btn {
                                width: 48%;
                                margin-top: .4rem;

                            }

                            .d-flex.gap-2 {
                                gap: 10px;

                            }
                        </style>
                        <div class="col-lg-3 col-md-6">
                            <div class="social-box facebook">
                                <i class="fa-brands fa-square-facebook"></i>
                                {{#if user.facebookToken}}
                                <div class="">
                                    <a class="btn border font-15 btn-success" href="#">Connected</a>
                                    <a class="btn btn-danger border font-15" href="/logoutfacebook">Logout</a>
                                </div>

                                {{else}}
                                <a class="btn btn-sm btn-outline-secondary" href="/auth/facebook">Connect now
                                </a>
                                {{/if}}
                            </div>

                        </div>
                        <div class="col-lg-3 col-md-6">


                            <div class="social-box twitter text-center">
                                <i class="fa-brands fa-whatsapp fa-2x"></i>

                                <div id="phone-number-container" class="font-15" style="font-weight: bold;">
                                    <span id="connected-number">
                                        {{#if whatsappConnectedPhoneNumber}}
                                        {{whatsappConnectedPhoneNumber}}
                                        {{else}}

                                        {{/if}}
                                    </span>
                                </div>

                                <a href="/qr" onclick="findLead()" id="whatsapp-Connect-Btn"
                                    class="btn btn-sm btn-outline-secondary">Connect
                                    Now</a>
                                <a href="/logoutWA" id="whatsapp-Logout-Btn" class="btn btn-sm btn-danger"
                                    style="display: none;">Logout</a>
                            </div>
                        </div>

                        <!--/.col-->


                        <div class="col-lg-3 col-md-6" style="opacity: 0.3;">
                            <div class="social-box linkedin">
                                <i class="fa fa-download"></i>
                                {{!-- <a class="btn btn-outline-secondary border  font-15" href="#">Download
                                    Data </a> --}}
                                <a href="#" class="btn border font-15">Download
                                    Data</a>
                            </div>
                            <!--/social-box-->
                        </div>
                        <div class="col-lg-3 col-md-6" style="opacity: 0.3;">
                            <div class="social-box mailchimp">
                                <i class="fab fa-mailchimp"></i>

                                {{!-- <a class="btn btn-outline-secondary border  font-15" href="#">connect now </a>
                                --}}
                                <a class="btn border  font-15" href="#">Connect now </a>
                            </div>
                            <!--/social-box-->
                        </div>
                    </div>
                    <div class="row " id="pipelineBoxContainer-row">


                        {{#each pipes}}

                        <div class="col-sm-6 col-lg-3">
                            <div class="card text-white" style="background-color: {{color}};">
                                <div class="card-body pb-0">
                                    <h4 class="mb-0">
                                        <span class="count" style="text-transform: capitalize; font-size: x-large;">
                                            {{countLeadsByStatus ../leads title}}
                                        </span>
                                    </h4>
                                    <p style="text-transform: capitalize; font-size: x-large;" class="text-light">
                                        {{title}}</p>

                                    {{!-- <div class="chart-wrapper px-0" style="height:70px;" height="70">
                                        <canvas id="widgetChart1"></canvas>
                                    </div> --}}
                                </div>

                            </div>
                        </div>
                        {{/each}}


                    </div>

                    <style>
                        #date1:before {
                            content: attr(placeholder);
                            color: #999;
                            position: absolute;
                            margin-right: 14px;
                        }

                        #date2:before {
                            content: attr(placeholder);
                            color: #999;
                            position: absolute;
                            margin-right: 14px;
                        }
                    </style>

                    <div class="col-xl-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col">
                                        <h4 class="card-title mb-0">Graphical lead performance insights</h4>
                                        {{!-- <div class="small text-muted">Lead Analytics</div> --}}

                                    </div>
                                </div>
                                <div class="row d-flex">
                                    <div class="col-md-12 col-12">
                                        <label style="margin-top: .6rem; margin-bottom: 0;" for="timeRange">Select
                                            Time Range:</label>
                                        <select style="margin: 0; padding: 6px;" id="timeRange"
                                            onchange="updateChart()">
                                            <option value="today">Today</option>
                                            <option value="yesterday">Yesterday</option>
                                            <option value="thisWeek">This Week</option>
                                            <option value="lastWeek">Last Week</option>
                                            <option value="thisMonth">This Month</option>
                                            <option value="lastMonth">Last Month</option>
                                            <option value="thisYear">This Year</option>
                                            <option value="custom">Custom Date</option>
                                        </select>
                                    </div>
                                    <div class="row flex px-4" id="customDateRange" style="display:none;">
                                        {{!-- <div class="col-4"> --}}
                                            {{!-- <label style="margin-bottom: 0;" for="startDate">Start Date:</label>
                                            --}}
                                            <input placeholder="Start date" id="date1"
                                                style="min-width: 50px; width:100px; margin: 6px; padding: 6px;"
                                                type="date" id="startDate">

                                            {{!--
                                        </div> --}}
                                        {{!-- <div class="col-4"> --}}
                                            {{!-- <label style="margin-bottom: 0;" for="endDate">End Date:</label> --}}
                                            <input placeholder="End date" id="date2"
                                                style="min-width: 50px; width:100px; margin: 6px; padding: 6px;"
                                                type="date" id="endDate">
                                            {{!--
                                        </div> --}}



                                        {{!-- <div class="col-2"
                                            style="display: flex; justify-content: center; height: 100%; align-items: center;">
                                            --}}
                                            <button class="btn btn-primary btn-sm"
                                                onclick="applyCustomDateRange()">Apply</button>
                                            {{!--
                                        </div> --}}
                                    </div>
                                </div>
                                <!--/.row-->
                                <div class="chart-wrapper mt-4" style="overflow: auto;">
                                    <canvas id="competitionGraph"
                                        style="min-width:400px; width:800px; min-height:200px; max-height: 300px;"
                                        height="300"></canvas>
                                </div>

                            </div>


                        </div>
                    </div>

                    <div class="col-xl-3 col-lg-6">
                        <form action="/user/profile/image" hidden id="user-image-change-form"
                            enctype="multipart/form-data" method="post">
                            <input onchange="changeProfileImage()" type="file" name="userImage"
                                id="user-profile-image-input" accept="image/*" required>
                        </form>
                        <section class="card" style="min-height: 400px;">
                            <div class="profile-card">
                                <div class="corner-ribon black-ribon">
                                    <label for="user-profile-image-input"><i class="fas fa-edit"></i></label>
                                </div>

                                <div class="media">

                                    <div class="media-body">
                                        <div class="profile-details">

                                            {{#if user.profilePicture}}
                                            <img id="user_image" width="70" height="70" src="{{user.profilePicture}}"
                                                class="rounded-circle">
                                            {{else}}
                                            <img id="user_image" width="70" height="70"
                                                src="//www.gravatar.com/avatar/9ef7cb630b294dc458d676560e96d060?d=http%3A%2F%2Faccounts.pabbly.com%2Fimages%2Fdefault-profile-pic.png"
                                                class="rounded-circle">
                                            {{/if}}

                                        </div>
                                        <h2 class="text-white display-6">{{user.name}}</h2>
                                        <p class="text-light">{{user.email}}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="weather-category twt-category">
                                <ul>
                                    <li class="active">
                                        <h5>{{leads.length}}</h5>
                                        Leads
                                    </li>
                                    <li>
                                        <h5>{{user.myleads.length}}</h5>
                                        my leads
                                    </li>
                                    <li>
                                        <h5>{{user.teams.length}}</h5>
                                        myteam
                                    </li>
                                </ul>
                            </div>
                            <a href="/profile" id="acc-Btn" class="btn btn-secondary border ml-4 mr-4 font-15">update
                                profile</a>
                            <footer class="twt-footer">
                                {{!-- <a href="#"><i class="fa fa-camera"></i></a> --}}
                                <a href="#"><i class="fa fa-map-marker"></i></a>
                                <a id="location-title"></a>
                                <span id="location-localtime" class="pull-right">

                                </span>
                            </footer>
                        </section>
                    </div>

                    <style>
                        form {
                            background: none;
                            padding: 0;
                            border-radius: 0;
                            box-shadow: none;
                            width: 100%;
                            gap: 7px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;

                        }

                        form input {
                            width: 65%;
                        }

                        .colorinp {
                            display: block;
                            cursor: pointer;
                            border-radius: 50%;

                        }

                        #pipeAddBtn {
                            font-size: 15px;
                            border-radius: 4px;
                        }

                        li {
                            list-style: none;
                            margin: 0;
                        }

                        li form input {
                            margin: 0;
                            border: none;
                        }



                        #pipe-container-s::-webkit-scrollbar {
                            display: none;
                        }

                        .actionBar {
                            width: fit-content;
                            height: fit-content;
                            padding: 8px 8px;
                            background-color: #fff;
                            box-shadow: 1px 1px 15px 3px #424242;
                            border-radius: 4px;
                            display: none;
                            justify-content: center;
                            align-items: center;
                            flex-direction: column;
                            gap: 13px;
                            position: absolute;
                            right: 2rem;
                        }
                    </style>

                    <div class="col-xl-3 col-lg-6">
                        <div class="card">
                            {{!-- todo loader for pipe addition --}}
                            <div class="card-body">
                                <div id="addPipeLoader" class="findNewLeadloader">
                                    <section id="finSec"><span class="loader-11"> </span></section>
                                </div>
                                <div class="stat-widget-one" id="pipe-container-s"
                                    style="height: 350px;max-height: 350px; overflow: auto;">
                                    <p style="font-size: 14px; color: #1a1a1a;font-weight: 500; margin: 0;">Integrate
                                        your personalized pipelines</p>
                                    <form id="addPipelineForm">
                                        <input type="text" id="inputPassword2" name="title" placeholder="Enter Pipline">
                                        <input type="color" class="colorinp" id="colorinp2"
                                            style="width: 32px; height: 32px; border: none; padding: 0;" name="color">
                                        <button type="submit" class="btn btn-primary" id="addPipelineBtn">Add</button>
                                    </form>

                                    <ul id="allPipesShowing">
                                        {{#each pipes}}
                                        {{#if defaultVal}}
                                        {{!-- Display the default document at the top --}}
                                        <li
                                            style="display: flex; border-radius: 4px; padding: 0 8px; border: 1px solid gray; justify-content: space-between; align-items: center; margin: 4px 0;">
                                            <form class="updatePipesForm"
                                                style="display: flex; justify-content: space-between; margin-right: 10px;"
                                                action="/user/pipeline/update/{{_id}}" id="form{{_id}}" method="post">

                                                <input type="radio" checked disabled class="colorinp"
                                                    style="width: 20px; height: 20px; margin-right: 5px; border: none; padding: 0;"
                                                    name="defaultVal" id="check-{{_id}}">

                                                <input type="text" disabled name="title"
                                                    style="text-transform: capitalize;" value="{{title}}"
                                                    id="title-{{_id}}">

                                                <input type="color" disabled class="colorinp" value="{{color}}"
                                                    style="width: 28px; height: 28px; border: none; padding: 0;"
                                                    name="color" id="color-{{_id}}">



                                                {{!-- <i id="sub-{{_id}}"
                                                    style="font-size: 23px; margin-right: 10px; cursor: pointer;" hidden
                                                    onclick="submitForm('{{_id}}')"
                                                    class="fa-solid fa-square-check"></i> --}}
                                            </form>
                                            <span
                                                style="display: flex; justify-content: center; align-items: center; gap: 8px;">
                                                <label style="margin: 0;" for="title-{{_id}}">
                                                    <i onclick="updatePiplineForm('{{_id}}')" style="cursor: pointer;"
                                                        class="fa-solid fa-pen-to-square"></i></label>

                                                <a onclick="deletePipeFromAdmin('{{_id}}')"><i
                                                        class="fa-regular fa-trash-can" style="color: crimson;"></i></a>
                                            </span>
                                        </li>
                                        {{/if}}
                                        {{/each}}
                                        {{!-- Loop through again, this time displaying the non-default documents --}}
                                        {{#each pipes}}
                                        {{#unless defaultVal}}
                                        <li
                                            style="display: flex; border-radius: 4px; padding: 0 8px; border: 1px solid gray; justify-content: space-between; align-items: center; margin: 4px 0;">
                                            <form class="updatePipesForm"
                                                style="display: flex; justify-content: space-between; margin-right: 10px;"
                                                action="/user/pipeline/update/{{_id}}" id="form{{_id}}" method="post">

                                                <input type="radio" value="on" disabled class="colorinp"
                                                    style="width: 20px; height: 20px; border: none; padding: 0;"
                                                    name="defaultVal" id="check-{{_id}}">

                                                <input type="text" disabled name="title"
                                                    style="text-transform: capitalize;" value="{{title}}"
                                                    id="title-{{_id}}">

                                                <input type="color" disabled class="colorinp" value="{{color}}"
                                                    style="width: 28px; height: 28px; border: none; padding: 0;"
                                                    name="color" id="color-{{_id}}">



                                                {{!-- <i id="sub-{{_id}}"
                                                    style="font-size: 23px; margin-right: 10px; cursor: pointer;" hidden
                                                    onclick="submitForm('{{_id}}')"
                                                    class="fa-solid fa-square-check"></i> --}}
                                            </form>
                                            <span
                                                style="display: flex; justify-content: center; align-items: center; gap: 8px;">
                                                <label for="title-{{_id}}" style="margin: 0;">
                                                    <i onclick="updatePiplineForm('{{_id}}')" style="cursor: pointer;"
                                                        class="fa-solid fa-pen-to-square"></i>
                                                </label>

                                                <a  onclick="deletePipeFromAdmin('{{_id}}')"><i
                                                        class="fa-regular fa-trash-can" style="color: crimson;"></i></a>
                                            </span>

                                            {{!-- <i style="margin-right: 10px; font-size: 1rem;"
                                                onclick="openActionBar('{{_id}}')"
                                                class="fa-solid fa-ellipsis-vertical"></i>
                                            <div class="actionBar" id="actionBar-{{_id}}">
                                                <label onclick="updatePiplineForm('{{_id}}')" for="title-{{_id}}"
                                                    style="margin: 0;">
                                                    Edit <i style="cursor: pointer;"
                                                        class="fa-solid fa-pen-to-square"></i>
                                                </label>

                                                <a href="#" onclick="deletePipeFromAdmin('{{_id}}')">Delete<i
                                                        class="fa-regular fa-trash-can" style="color: crimson;"></i></a>

                                            </div> --}}
                                        </li>
                                        {{/unless}}
                                        {{/each}}

                                        <button id="submitAllPipesUpdatedForm" onclick="submitAllPipesUpdatedForm()"
                                            class="btn btn-success btn-sm float-right mx-2 mt-2" hidden>Save</button>


                                    </ul>


                                    {{!-- <div class="col-md-6">
                                        <div class="card border-0">
                                            <ul>
                                                {{#each pipelines}}
                                                <div style="display: flex; justify-content: space-between;">
                                                    <li>
                                                        <form style="display: flex; justify-content: space-between;"
                                                            action="/pipeline/update/{{_id}}" method="post">
                                                            <input type="text" disabled
                                                                class="form-control update-input" name="title"
                                                                value="{{title}}">

                                                            <button type="submit" hidden class="sub-btn"><i
                                                                    class="fa-solid fa-square-check"></i></button>
                                                        </form>
                                                    </li>
                                                    <span>




                                                        <span>
                                                            <i onclick="updatePiplineForm({})"
                                                                class="fa-solid fa-pen-to-square"></i>

                                                            <a href="/pipeline/del/{{_id}}"><i
                                                                    class="fa-regular fa-trash-can"></i></a>

                                                            <i id="color-piker-btn" class="fa-solid fa-palette"></i>

                                                        </span>

                                                        <div id="color-piker-box">
                                                            <span class="circle-red"></span>
                                                            <span class="circle-pink"></span>
                                                            <span class="circle-blue"></span>
                                                            <span class="circle-yellow"></span>
                                                            <span class="circle-green"></span>
                                                            <span class="circle-purpul"></span>
                                                        </div>
                                                    </span>
                                                </div>
                                                {{/each}}
                                            </ul>
                                        </div>
                                    </div> --}}

                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            </div>




        </div>
    </div>
    {{/if }}
    <!-- jQuery CDN for AJAX -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha384-vk5WoKIaW/vJyUAd9n/wmopsmNhiy+L2Z+SBxGYnUkunIxVxAv/UtMOhba/xskxh"
        crossorigin="anonymous"></script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ=="
        src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ=="
        src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ=="
        src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.12/js/bootstrap-select.js"></script>

    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ=="
        src="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/js/select2.min.js"></script>

    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script>

    </script>
    <script src="/assets/js/pipes.js"></script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==" type="text/javascript">
        $(document).ready(function () {
            $('#signup').on('submit', function () {
                $('.loader-display').css('display', 'block');
            });
        });
    </script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==">
        $(window).scroll(function () {
            if ($(window).scrollTop() >= 72) {
                $('#top_header').addClass('sticky');
            } else {
                $('#top_header').removeClass('sticky');
            }
        });
    </script>
    <script nonce="Hg5F/VDpALFrdOCYRvBAvQ==">
        $('#nav-tab a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });

        // store the currently selected tab in the hash value
        $("ul.nav-tabs > li > a").on("shown.bs.tab", function (e) {
            var id = $(e.target).attr("href").substr(1);
            console.log("id", id);
            window.location.hash = id;
        });

        // on load of the page: switch to the currently selected tab
        var hash = window.location.hash;
        $('#nav-tab a[href="' + hash + '"]').tab('show');
    </script>


    <script>
        function addPipelineForm() {
            let popform = document.querySelector('#add-pipeline-form')
            if (popform.style.display === 'none')
                popform.style.display = 'block'
            else
                popform.style.display = 'none'

        }

        let flag = 0;
        function updatePiplineForm(id) {
            const titleInput = document.getElementById(`title-${id}`);
            const colorInput = document.getElementById(`color-${id}`);
            const defaultinp = document.getElementById(`check-${id}`);
            const submitBtn = document.getElementById(`submitAllPipesUpdatedForm`);
            console.log(submitBtn.hidden)
            console.log(id)

            if (titleInput.disabled && colorInput.disabled) {
                // Enable editing
                titleInput.disabled = false;
                colorInput.disabled = false;
                defaultinp.disabled = false;
                submitBtn.hidden = false;
            } else {
                // Prevent further editing
                titleInput.disabled = true;
                colorInput.disabled = true;
                defaultinp.disabled = true;

                submitBtn.hidden = true;
            }

        }

        //function submitForm(id) {
        //    let form = document.querySelector(`#form${id}`)
        //    form.submit()
        //}

        function LabelColorChanged(id) {
            const colorLabel = document.querySelector(`#colorLabel${id}`);
            const colorInput = document.querySelector(`#color${id}`);

            colorInput.click();

            const selectedColor = colorInput.value;
            colorLabel.style.backgroundColor = selectedColor;

        }



        //popup form

        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('org-form');
            const popupForm = document.getElementById('popup-form');

            if (form) {
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const formData = new FormData(form);
                    const data = {
                        email: formData.get('email'),
                        organizationName: formData.get('organizationName'),
                        sector: formData.get('sector')
                    };

                    try {
                        const response = await fetch('/submit-form', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();

                        if (response.ok) {
                            alert(result.message);
                            // Update the user document with organizationName and sector
                            await fetch('/update-user', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    id: result.id,
                                    organizationName: data.organizationName,
                                    sector: data.sector
                                })
                            });

                            // Hide form after successful submission
                            popupForm.style.display = 'none';
                            // Reload the page to show the dashboard
                            window.location.reload();
                        } else {
                            alert(result.message); // Show error message
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error submitting the form');
                    }
                });
            }
        });

    </script>

    <script>
        function radioBtns() {
            // Get all radio buttons with the same name
            var radios = document.querySelectorAll('input[name="defaultVal"]');
            console.log("radio fun",radios)
            // Add click event listener to each radio button
            radios.forEach(function (radio) {
                radio.addEventListener('click', function () {
                    // Deselect all other radios except the clicked one
                    radios.forEach(function (otherRadio) {
                        if (otherRadio !== radio) {
                            otherRadio.checked = false; // Deselect all other radios
                        }
                    });
                });
            });
        }
        radioBtns()
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    {{!--
    <script>
        // console.log("hello ji")
        const leads = {{{ json user.myleads }}};
        // console.log(leads);
        const pipelines = {{{ json pipes }}};
        // console.log(pipelines);

        const pipelineMap = {};
        pipelines.forEach(pipe => {
            pipelineMap[pipe.title] = {
                color: pipe.color + '40',
                count: 0
            };
        });

        console.log('pipe object =========', pipelineMap)

        const processedData = {};

        console.log('val of status', leads[1].status.title)
        leads.forEach(lead => {
            const date = new Date(lead.income_time).toISOString().split('T')[0];
            const statusTitle = lead.status ? lead.status.title : 'Unknown'; // Default status title

            if (!processedData[date]) {
                processedData[date] = {};
            }

            if (pipelineMap[statusTitle]) {
                if (!processedData[date][statusTitle]) {
                    processedData[date][statusTitle] = 0;
                }
                processedData[date][statusTitle]++;
            } else {
                // Handle unknown status if needed
                if (!processedData[date]['Unknown']) {
                    processedData[date]['Unknown'] = 0;
                }
                processedData[date]['Unknown']++;
            }
        });
        console.log("611====", processedData)
        // Prepare data for the graph
        const labels = Object.keys(processedData);
        const datasets = Object.keys(pipelineMap).map(statusTitle => {
            return {
                label: statusTitle,
                data: labels.map(date => processedData[date][statusTitle] || 0),
                backgroundColor: pipelineMap[statusTitle].color, // Use backgroundColor for area chart
                borderColor: pipelineMap[statusTitle].color, // Optional, to keep the border color
                borderWidth: 1,
                outerWidth: 1,
                innerWidth: 1,

                fill: true,
                tension: 1, // Set fill to true for area chart
            };
        });

        const ctx = document.getElementById('competitionGraph').getContext('2d');
        const competitionData = {
            labels: labels,
            datasets: datasets
        };

        const config = {
            type: 'bar', // 'line' type can be used for area charts too
            data: competitionData,
            options: {
                scales: {
                    x: { title: { display: true, text: 'Income Time' } },
                    y: { title: { display: true, text: 'Number of Leads' } },
                },

            },
        };

        new Chart(ctx, config);
    </script> --}}

    {{!--
    <script>
        const arr = {{{ json user.myleads }}}
        const pipelines = {{{ json pipes }}};
        const pipelineMap = {};
        pipelines.forEach(pipe => {
            pipelineMap[pipe.title] = {
                color: pipe.color + 'dd',
                count: 0
            };
        });

        const leadsData = arr.map(item => ({
            createdAt: item.statusTime,
            status: item.status.title // Ensure that `status` is populated correctly
        }));

        function formatXaxis(range, date, currentDate) {
            const d = new Date(date);

            // Ensure valid date object
            if (isNaN(d.getTime())) {
                return 'N/A';  // Return 'N/A' if date is invalid
            }

            if (range === 'today') {
                return d.toTimeString().slice(0, 5); // Only show time (HH:MM)
            } else if (range === 'yesterday') {
                d.setDate(d.getDate() - 1);
                console.log(d.toLocaleDateString() + ' ' + d.toTimeString().slice(0, 5))
                return d.toLocaleDateString() + ' ' + d.toTimeString().slice(0, 5);
            } else if (range === 'lastWeek') {
                return d.toLocaleDateString();  // Show individual date within last week
            } else if (range === 'lastMonth') {
                const day = d.getDate();
                const startDay = Math.floor((day - 1) / 7) * 7 + 1;
                const endDay = startDay + 6;

                // Get the month and year
                const month = d.getMonth(); // zero-based index
                const year = d.getFullYear();

                // Format the start and end days
                const formattedStart = `${String(startDay).padStart(2, '0')}/${String(month + 1).padStart(2, '0')}/${year}`;
                const formattedEnd = `${String(endDay).padStart(2, '0')}/${String(month + 1).padStart(2, '0')}/${year}`;

                return `${formattedStart}-${formattedEnd}`;  // E.g., 01/09/2024-07/09/2024
            } else if (range === 'thisYear') {
                return d.toLocaleString('default', { month: 'long' }) + ' ' + d.getFullYear();  // Show month and year
            }

            return 'N/A';  // Return 'N/A' for unknown range
        }

        function processLeadsData(leads, range) {
            const groupedData = {};
            const currentDate = new Date();

            if (range === 'lastWeek') {
                // Calculate last week's start and end dates
                const dayOfWeek = currentDate.getDay();
                const currentWeekStart = new Date(currentDate);
                currentWeekStart.setDate(currentWeekStart.getDate() - dayOfWeek);  // Start of this week

                const lastWeekStart = new Date(currentWeekStart);
                lastWeekStart.setDate(lastWeekStart.getDate() - 7);  // Start of last week

                const lastWeekEnd = new Date(lastWeekStart);
                lastWeekEnd.setDate(lastWeekStart.getDate() + 6);  // End of last week

                // Initialize groupedData with all 7 days of the last week
                for (let i = 0; i < 7; i++) {
                    const day = new Date(lastWeekStart);
                    day.setDate(lastWeekStart.getDate() + i);
                    const label = day.toLocaleDateString();  // Label is the date
                    groupedData[label] = {};

                    // Initialize each status for that day as 0
                    Object.keys(pipelineMap).forEach(status => {
                        groupedData[label][status] = 0;
                    });
                }

                // Loop through leads and add them to the correct day
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);

                    // Make sure the lead is within the last week
                    if (leadDate >= lastWeekStart && leadDate <= lastWeekEnd) {
                        const label = leadDate.toLocaleDateString();  // Use individual date as label

                        if (!groupedData[label]) {
                            groupedData[label] = {};
                            Object.keys(pipelineMap).forEach(status => {
                                groupedData[label][status] = 0;
                            });
                        }

                        // Increment the count for the lead's status
                        groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                    }
                });
            } else {
                // For other ranges, use the original logic
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);

                    let label;
                    if (range === 'today') {
                        const isToday = leadDate.toDateString() === currentDate.toDateString();
                        console.log(isToday)
                        if (!isToday) return;
                        label = formatXaxis(range, lead.createdAt, currentDate);
                    } else if (range === 'yesterday') {
                        const isWithinLast24Hours = leadDate >= new Date(currentDate - 24 * 60 * 60 * 1000) && leadDate < currentDate;
                        if (!isWithinLast24Hours) return;
                        label = formatXaxis(range, lead.createdAt, currentDate);
                        console.log(label)
                    } else {
                        label = formatXaxis(range, lead.createdAt, currentDate);
                    }

                    if (!groupedData[label]) {
                        groupedData[label] = {};
                        Object.keys(pipelineMap).forEach(status => {
                            groupedData[label][status] = 0;
                        });
                    }

                    groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                });
            }

            return groupedData;
        }

        function getChartData(leads, range) {
            const groupedData = processLeadsData(leads, range);
            const labels = Object.keys(groupedData);
            const datasets = [];

            // Create datasets for each status dynamically
            Object.keys(pipelineMap).forEach(status => {
                const data = labels.map(label => groupedData[label][status] || 0);
                datasets.push({
                    label: status.charAt(0).toUpperCase() + status.slice(1),
                    data: data,
                    backgroundColor: pipelineMap[status].color, // Adjust opacity if needed
                    borderColor: pipelineMap[status].color, // Full color for border
                    borderWidth: 1,
                    stack: 'stacked'
                });
            });

            return {
                labels: labels,
                datasets: datasets
            };
        }

        function getXaxisTitle(range) {
            if (range === 'today' || range === 'yesterday') {
                return 'Time';
            } else if (range === 'lastWeek' || range === 'lastMonth') {
                return 'Date';
            } else if (range === 'thisYear') {
                return 'Month';
            }
        }

        // Initialize Chart.js
        const ctx = document.getElementById('competitionGraph').getContext('2d');
        let myChart = new Chart(ctx, {
            type: 'bar',
            data: getChartData(leadsData, 'today'), // Default to 'today'
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Leads'
                        },
                        stacked: true
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        },
                        stacked: true
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return `${tooltipItem.dataset.label}: ${tooltipItem.raw} leads`;
                            }
                        }
                    }
                }
            }
        });

        // Update chart when dropdown selection changes
        function updateChart() {
            const range = document.getElementById('timeRange').value;
            const chartData = getChartData(leadsData, range);

            myChart.data.labels = chartData.labels;
            myChart.data.datasets.forEach((dataset, index) => {
                dataset.data = chartData.datasets[index].data;
            });

            myChart.options.scales.x.title.text = getXaxisTitle(range);
            myChart.update();
        }

    </script> --}}




    <script>
        async function checkConnectionStatus() {
            try {
                const response = await fetch('/connection-status');
                const data = await response.json();
                const isConnected = data.isConnected;
                const connectBtn = document.getElementById('whatsapp-Connect-Btn');
                const logoutBtn = document.getElementById('whatsapp-Logout-Btn');

                if (isConnected) {

                    connectBtn.textContent = 'Connected';
                    connectBtn.classList.remove('btn-outline-secondary');
                    connectBtn.classList.add('btn-success');
                    connectBtn.setAttribute('disabled', true);

                    // Show the Logout button
                    logoutBtn.style.display = 'inline-block'; // Show the Logout button
                } else {
                    // Reset the Connect button to "Connect Now"
                    connectBtn.textContent = 'Connect Now';
                    connectBtn.classList.remove('btn-success');
                    connectBtn.classList.add('btn-outline-secondary');
                    connectBtn.removeAttribute('disabled'); // Enable the Connect button again

                    // Hide the Logout button
                    logoutBtn.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching connection status:', error);
            }
        }

        // Call the function when the page loads
        document.addEventListener('DOMContentLoaded', checkConnectionStatus);
    </script>

    {{!--
    <script>
        async function checkConnectionStatus() {
            try {
                const response = await fetch('/connection-status');
                const data = await response.json();

                console.log('Connection status response:', data);

                const isConnected = data.isConnected;
                const phoneNumber = data.phoneNumber || 'No WhatsApp connected';
                const phoneNumberContainer = document.getElementById('connected-number');
                const connectBtn = document.getElementById('whatsapp-Connect-Btn');
                const logoutBtn = document.getElementById('whatsapp-Logout-Btn');

                if (isConnected) {
                    phoneNumberContainer.textContent = `Connected: ${phoneNumber}`;
                    connectBtn.textContent = 'Connected';
                    connectBtn.classList.replace('btn-outline-secondary', 'btn-success');
                    connectBtn.setAttribute('disabled', true);
                    logoutBtn.style.display = 'inline-block';
                } else {
                    phoneNumberContainer.textContent = '';
                    connectBtn.textContent = 'Connect Now';
                    connectBtn.classList.replace('btn-success', 'btn-outline-secondary');
                    connectBtn.removeAttribute('disabled');
                    logoutBtn.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching connection status:', error);
            }
        }

        // Call the function when the page loads
        document.addEventListener('DOMContentLoaded', checkConnectionStatus);


    </script> --}}
    {{!--todo profile card current location with local time --}}
    <script>
        async function getLocation(leti, logi) {
            const data = await fetch(`https://api.weatherapi.com/v1/current.json?key=fffb3eafa2394421ae9120857242309&q=${leti},${logi}&api=yes`)
            let city = await data.json()
            // console.log(city);

            let space = document.querySelector('#location-title')
            let spacetime = document.querySelector('#location-localtime')
            space.innerHTML = `${city.location.name},${city.location.country}`
            spacetime.innerHTML = `${city.location.localtime}`
        }

        function getData(position) {
            // console.log(position);
            getLocation(position.coords.latitude, position.coords.longitude)
        }
        function getErr() {
            console.log("Oops, Somehing went wrong !");
        }

        document.addEventListener('DOMContentLoaded', async () => {
            navigator.geolocation.getCurrentPosition(getData, getErr)
        })
    </script>

    <script>
        function changeProfileImage() {
            let imageInpForm = document.querySelector('#user-image-change-form');

            imageInpForm.submit()

        }
    </script>

    <script>
        const arr = {{{ json user.myleads }}};
        const pipelines = {{{ json pipes }}};
        const pipelineMap = {};

        // Create a map of pipelines with status and colors
        pipelines.forEach(pipe => {
            pipelineMap[pipe.title] = {
                color: pipe.color + '90', // Add some opacity to the color
                count: 0
            };
        });

        // Prepare lead data for charting
        // const leadsData = arr.map(item => ({
        //    createdAt: item.statusTime, // Ensure this is a date string or timestamp
        //    status: item.status.title // Ensure the status is correctly populated
        //}));
        const leadsData = arr.map((item) => {
            if (!item.status) return {}
            return { createdAt: item.statusTime, status: item.status.title }
            // Ensure the status is correctly populated
        });
        console.log(leadsData)

        // Format X-axis labels based on selected range
        function formatXaxis(range, date) {
            const d = new Date(date);
            if (isNaN(d.getTime())) return 'N/A'; // Handle invalid dates

            if (range === 'today') {
                return d.toTimeString().slice(0, 5); // HH:MM
            } else if (range === 'yesterday') {
                return d.toLocaleDateString() + ' ' + d.toTimeString().slice(0, 5); // Date and time for yesterday
            } else if (range === 'lastWeek') {
                return d.toLocaleDateString(); // Show only the date for last week
            } else if (range === 'lastMonth') {
                return `${String(d.getDate()).padStart(2, '0')}/${String(d.getMonth() + 1).padStart(2, '0')}/${d.getFullYear()}`; // DD/MM/YYYY format for last month
            } else if (range === 'thisYear') {
                return d.toLocaleString('default', { month: 'long' }) + ' ' + d.getFullYear(); // Show month and year
            }

            return 'N/A'; // Handle unknown range
        }

        // Process leads data and group it based on the selected range
        function processLeadsData(leads, range) {
            const groupedData = {};
            const currentDate = new Date();

            if (range === 'thisWeek') {
                const currentWeekStart = new Date(currentDate);

                currentWeekStart.setDate(currentDate.getDate() - currentDate.getDay()); // Start of current week (Sunday)

                const currentWeekEnd = new Date(currentWeekStart);
                currentWeekEnd.setDate(currentWeekStart.getDate() + 6); // End of current week (Saturday)

                // Initialize each day in the current week
                for (let i = 0; i < 7; i++) {
                    const day = new Date(currentWeekStart);
                    day.setDate(currentWeekStart.getDate() + i);
                    const label = day.toLocaleDateString();
                    groupedData[label] = {};

                    // Initialize pipeline statuses
                    Object.keys(pipelineMap).forEach(status => {
                        groupedData[label][status] = 0;
                    });
                }

                // Add leads data to the correct day
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);
                    if (leadDate >= currentWeekStart && leadDate <= currentWeekEnd) {
                        const label = leadDate.toLocaleDateString();
                        groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                    }
                });
            }

            else if (range === 'lastWeek') {
                const currentWeekStart = new Date(currentDate);
                currentWeekStart.setDate(currentDate.getDate() - currentDate.getDay()); // Start of current week

                const lastWeekStart = new Date(currentWeekStart);
                lastWeekStart.setDate(lastWeekStart.getDate() - 7); // Start of last week
                const lastWeekEnd = new Date(lastWeekStart);
                lastWeekEnd.setDate(lastWeekStart.getDate() + 6); // End of last week

                // Initialize each day in last week
                for (let i = 0; i < 7; i++) {
                    const day = new Date(lastWeekStart);
                    day.setDate(lastWeekStart.getDate() + i);
                    const label = day.toLocaleDateString();
                    groupedData[label] = {};

                    // Initialize pipeline statuses
                    Object.keys(pipelineMap).forEach(status => {
                        groupedData[label][status] = 0;
                    });
                }

                // Add leads data to the correct day
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);
                    if (leadDate >= lastWeekStart && leadDate <= lastWeekEnd) {
                        const label = leadDate.toLocaleDateString();
                        groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                    }
                });

            }

            else if (range === 'thisMonth') {
                const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1); // Start of current month
                const currentMonthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0); // End of current month

                // Set the end time to 23:59:59 for proper comparison
                currentMonthEnd.setHours(23, 59, 59, 999);

                console.log("Current Month Start: ", currentMonthStart);  // Debug log
                console.log("Current Month End: ", currentMonthEnd);  // Debug log

                // Initialize each day in the current month
                for (let day = new Date(currentMonthStart); day <= currentMonthEnd; day.setDate(day.getDate() + 1)) {
                    const label = day.toLocaleDateString();
                    groupedData[label] = {};

                    // Initialize pipeline statuses for each day
                    Object.keys(pipelineMap).forEach(status => {
                        groupedData[label][status] = 0;
                    });
                }

                // Add leads data to the correct day
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);
                    console.log("Lead Date: ", leadDate);  // Debug log

                    // Check if the lead date falls within the current month range
                    if (leadDate >= currentMonthStart && leadDate <= currentMonthEnd) {
                        const label = leadDate.toLocaleDateString();
                        console.log("Adding to label: ", label, " with status: ", lead.status);  // Debug log

                        // Increment the status count for the respective day
                        groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                    } else {
                        console.log("Lead is outside the current month range:", leadDate);  // Debug log
                    }
                });

                console.log("Grouped Data for This Month: ", groupedData);  // Final output log
            }

            else if (range === 'lastMonth') {
                const lastMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1); // First day of last month
                const lastMonthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0); // Last day of last month
                const daysInLastMonth = lastMonthEnd.getDate();

                // Initialize each day in last month
                for (let i = 1; i <= daysInLastMonth; i++) {
                    const day = new Date(lastMonthStart.getFullYear(), lastMonthStart.getMonth(), i);
                    const label = day.toLocaleDateString();
                    groupedData[label] = {};
                    Object.keys(pipelineMap).forEach(status => {
                        groupedData[label][status] = 0; // Initialize count to 0
                    });
                }

                // Add leads data to the correct day
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);
                    if (leadDate >= lastMonthStart && leadDate <= lastMonthEnd) {
                        const label = leadDate.toLocaleDateString();
                        groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                    }
                });
            }

            else {
                // For other ranges, process the leads accordingly
                leads.forEach(lead => {
                    const leadDate = new Date(lead.createdAt);
                    let label;

                    if (range === 'today') {
                        if (leadDate.toDateString() !== currentDate.toDateString()) return; // Skip leads not from today
                        label = formatXaxis(range, lead.createdAt);
                    } else if (range === 'yesterday') {
                        const yesterday = new Date(currentDate);
                        yesterday.setDate(currentDate.getDate() - 1);
                        if (leadDate.toDateString() !== yesterday.toDateString()) return; // Skip leads not from yesterday
                        label = formatXaxis(range, lead.createdAt);
                    } else {
                        label = formatXaxis(range, lead.createdAt);
                    }

                    if (!groupedData[label]) {
                        groupedData[label] = {};
                        Object.keys(pipelineMap).forEach(status => {
                            groupedData[label][status] = 0;
                        });
                    }
                    groupedData[label][lead.status] = (groupedData[label][lead.status] || 0) + 1;
                });
            }

            return groupedData;
        }

        // Get chart data based on the processed leads data
        function getChartData(leads, range) {
            const groupedData = processLeadsData(leads, range);
            const labels = Object.keys(groupedData);
            const datasets = [];

            // Create datasets dynamically for each status
            Object.keys(pipelineMap).forEach(status => {
                const data = labels.map(label => groupedData[label][status] || 0);
                datasets.push({
                    label: status.charAt(0).toUpperCase() + status.slice(1),
                    data: data,
                    backgroundColor: pipelineMap[status].color, // Adjusted with opacity
                    borderColor: pipelineMap[status].color, // Solid border color
                    borderWidth: 1,
                    stack: 'stacked'
                });
            });

            return {
                labels: labels,
                datasets: datasets
            };
        }

        // Get the X-axis title based on the selected range
        function getXaxisTitle(range) {
            if (range === 'today' || range === 'yesterday') {
                return 'Time';
            } else if (range === 'lastWeek' || range === 'lastMonth') {
                return 'Date';
            } else if (range === 'thisYear') {
                return 'Month';
            }
        }

        // Initialize Chart.js
        const ctx = document.getElementById('competitionGraph').getContext('2d');
        let myChart = new Chart(ctx, {
            type: 'bar',
            data: getChartData(leadsData, 'today'), // Default to 'today'
            options: {
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Number of Leads'
                        },
                        stacked: true
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        },
                        stacked: true
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return `${tooltipItem.dataset.label}: ${tooltipItem.raw} leads`;
                            }
                        }
                    }
                }
            }
        });

        // Update chart when dropdown selection changes
        function updateChart() {
            const range = document.getElementById('timeRange').value;
            if (range === 'custom') {
                document.getElementById('customDateRange').style.display = 'block';
            } else {
                document.getElementById('customDateRange').style.display = 'none';

                const chartData = getChartData(leadsData, range);

                myChart.data.labels = chartData.labels;
                myChart.data.datasets.forEach((dataset, index) => {
                    dataset.data = chartData.datasets[index].data;
                });

                myChart.options.scales.x.title.text = getXaxisTitle(range);
                myChart.update();
            }
        }


        function applyCustomDateRange() {
            const startDate = new Date(document.getElementById('date1').value);
            const endDate = new Date(document.getElementById('date2').value);

            // Add end-of-day time for the end date to include all leads for that day
            endDate.setHours(23, 59, 59, 999);

            if (isNaN(startDate) || isNaN(endDate)) {
                alert("Please select valid start and end dates.");
                return;
            }

            // Calculate the difference in months between start and end date
            const diffInMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth());

            let range;
            if (diffInMonths <= 1) {
                // If the difference is 1 month or less, treat it as 'thisMonth'
                range = 'thisMonth';
            } else {
                // If the difference is more than 1 month, treat it as 'thisYear'
                range = 'thisYear';
            }

            // Filter the leads data based on the custom date range
            const customLeads = leadsData.filter(lead => {
                const leadDate = new Date(lead.createdAt);
                return leadDate >= startDate && leadDate <= endDate;
            });

            // Get chart data based on the detected range
            const chartData = getChartData(customLeads, range);

            myChart.data.labels = chartData.labels;
            myChart.data.datasets.forEach((dataset, index) => {
                dataset.data = chartData.datasets[index].data;
            });

            // Update the X-axis title based on the detected range
            myChart.options.scales.x.title.text = getXaxisTitle(range);
            myChart.update();
        }

    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        let countryCodeInp = document.querySelector('#fst-countryCode')
        countryCodeInp.addEventListener('change', () => {
            const selectBox = document.getElementById("fst-countryCode");
            const selectedValue = selectBox.options[selectBox.selectedIndex].value;
            console.log("sel box val", selectBox.options)
            selectBox.options[selectBox.selectedIndex].innerHTML = "+" + selectedValue;
        })

        // let cPassword = document.querySelector('#cPassword');
        // let password = document.querySelector('#fst-password')
        // cPassword.addEventListener('keypress', (req, res) => {
        //     console.log('check pass', password)
        //     console.log(password.value, cPassword.value)
        // 
        //     if (cPassword.value === password.value) {
        //             cPassword.classList.remove('wrongpass')
        //             password.classList.remove('wrongpass')
        // 
        //     console.log('check pass matched')
        //         cPassword.classList.add('correctpass') 
        //         password.classList.add('correctpass') 
        //     } else {
        //         if (!cPassword.classList.contains('wrongpass'))
        //             cPassword.classList.remove('correctpass')
        //             password.classList.remove('correctpass')
        // 
        //             cPassword.classList.add('wrongpass')
        //             password.classList.add('wrongpass')
        //     }
        // })


        function SubmitFirstForm() {
            let cPassword = document.querySelector('#cPassword');
            let password = document.querySelector('#pass')
            let form = document.querySelector('#org-form')

            let isCheck = document.querySelector('#isAC').checked;
            let agentCodeInput = document.querySelector('#AC');


            if (isCheck && agentCodeInput.value.trim() === "") {
                alert("Please enter the agent code.");
                agentCodeInput.focus();
                return;
            }


            if (cPassword.value === password.value) {
                form.submit()
            }
            else {
                cPassword.parentElement.classList.add('wrongpass')
                console.log("pass not matched")
            }
        }


        const passwordField = document.getElementById("password");
        // Select all password toggle icons
        const togglePasswords = document.querySelectorAll(".password-toggle i");

        togglePasswords.forEach((togglePassword, index) => {
            togglePassword.addEventListener("click", function () {
                // Get the corresponding password field
                const passwordField = togglePassword.parentElement.previousElementSibling;
                if (passwordField.type === "password") {
                    passwordField.type = "text";
                    togglePassword.classList.remove("fa-eye");
                    togglePassword.classList.add("fa-eye-slash");
                } else {
                    passwordField.type = "password";
                    togglePassword.classList.remove("fa-eye-slash");
                    togglePassword.classList.add("fa-eye");
                }
            });
        });

        function toggleAgentCodeInput() {
            console.log('checked')
            let AC = document.querySelector('.AC')
            let isCheck = document.querySelector('#isAC')
            AC.style.display = isCheck.checked ? 'block' : 'none';
        }

    </script>


    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        async function findLead() {
            let loadBox = document.querySelector('#findNewLeadloader')


            let body = document.querySelector('body')
            if (loadBox) {
                console.log('clickkeeedddd')
                loadBox.style.display = 'flex'
                body.style.height = '100vh !important'
                body.style.overflow = 'hidden'
            }

            window.location.href = '/leads/pre'
        }
    </script>
</body>

</html>